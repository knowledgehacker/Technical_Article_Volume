						Manage FileSyncer Server code by Maven
							by minglin, 2013-03-28

You can get the FileSyncer Server code from github: git@github.com:knowledgehacker/FileSyncer.git

1. Setup a local repositories manager and tell Maven to retrieve repositories from local repositores manager
a. Setup Sonatype Nexus as the local repositories manager
Download Sonatype Nexus bundle from http://www.sonatype.org/nexus/go and unpack it in any directory as you like,
for example, "~/workspace/nexus-2.3.1-01".
cd ~/workspace/nexus-2.3.1-01
bin/nexus start
Then you can access to the Nexus server via webpage http://localhost:8081/nexus.
The dfault administrator user/password is "admin/admin123".
At this time, clicking "Views/Repositories -> Repositories" in the left side of the webpage, 
you can see a list of all the repositories Nexus knows about by default.
N.B. 1) To stop Nexus, execute "bin/nexus stop" in directory "nexus_directory". 
2) To change the address of your Nexus server, change "application-host" item in "nexus-2.3.1-01/conf/nexus.properties".

b.Create file settings.xml in directory "~/.m2", tell Maven to get repositories from local repositories manager
For an sample setting, please refer to file "settings.xml" in the same directory this article resides.

2. Manage FileSyncer Server code by Maven
1) Change the structure of sourcef files in directory "FileSyncer/http/server" to conform to Maven source code layout rule,
that is, create a "java" directory in "src/main".
And change the package name in each file, for example, change "package main.sync.server.http" to "package sync.server.http"
in "src/main/java/sync/server/http/HttpSyncServer.java".

2) Create file "pom.xml" in directory "FileSyncer/http/server".
Specify the project coordinate "groupId, artifactId, version", dependencies.
For detailed information, please refer to file "pom.xml" in "FileSyncer/http/server".
You can use goals of the plugin Dependency to get dependency information about your project.
For example, "mvn dependency:resolve" lists the dependencies have been resolved.
"mvn dependency:tree" lists the dependencies in tree view.

3. Add custom repositories for missing dependencies
If a repository your project depends on doesn't exist in the repositories list, you can add it by yourself.
For example, your project depends on jboss which doesn't exist in the repositories list by default,
you can find and add a Maven repository containing jboss as follows:
1) Visit webpage "repository.jboss.org/nexus/index.html" and click "Views/Repositories -> Repositories" in the left side.
Select group "Public JBoss Repository Group", you can see the value of column "Repository Path" is 
"https://repository.jboss.org/nexus/content/groups/jobss-public", which is the url of the repository we want.
2) Switch back to your Nexus, Click "Add -> Proxy Repository" in the menu of repositories list, 
fill in all the information needed and click "Save" button, especially, fill "Remote Storage Location" with the url got in 1).
3) Add the settings of the new repository to ~/.m2/settings.xml as follows:
       <repository>
          <id>jboss public</id>
          <name>local private jboss</name>
          <url>http://localhost:8081/nexus/content/repositories/jboss</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
       </repository>
Note the url value "http://localhost:8081/nexus/content/repositories/jboss" comes from "Repository Path" column 
of the new repository "JBoss Public Repository".
4) Test the new repository
Add a dependency on the jboss to ~/workspace/FileSyncer/http/server/pom.xml as follows:
    <dependency>
      <groupId>jboss</groupId>
      <artifactId>jboss</artifactId>
      <version>4.2.1.GA</version>
    </dependency>
Then build FileSyncer server using "mvn package", you can see jboss-4.2.1.GA.jar is downloaded in the console output,
and you can double check it by looking into ~/.m2/respository to see whether a jboss directory exists or not.
5) Add the new repository to public group
If you want to add the new repository to the public group, you navigate to the public group and click "Confgiuration",
you can see "JBoss Public Repository" is in the "Available Repositories" list(if you do not see it, please click "Refresh"
item in the menu). Drag the "JBoss Public Repository" to the "Ordered Group Repositories".

4. Run FileSyncer Server
The .jar package generated in directory "target/" using the pom.xml constructed till now doesn't contain the dependent .jars.
So we can't run FileSyncer Server using "java -cp target/server-0.1.jar sync.server.http.HttpSyncServer host port".
To include the dependent .jars in the .jar package generated, we need to do the following things:
1) Add Maven assembly-plugin which is responsible for assembling the denpendent .jars into the output .jar, as follows:
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
        </configuration>
      </plugin>
    </plugins>
  </build>
2) Assembly
mvn install assembly:assembly

Now you can run FileSyncer Server using the following command:
java -cp target/server-0.1-jar-with-dependencies.jar sync.server.http.HttpSyncServer host port

mvn exec:java -Dexec.mainClass=sync.server.http.HttpSyncServer
